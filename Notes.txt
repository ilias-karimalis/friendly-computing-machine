2025-03-19:

After discussing with Reto, I'm going to refactor the model transitions such 
that they all take a ProtectionDomain as an argument which is the domain that
is performing this transition in model state.

2025-03-20:

Rewriting the model initialize transition to insert a set of initial physical 
resource spaces and the initial ProtectionDomain { 0 }. Also making a change to
the invariants for ResourceSpaces, such that Virtual ResourcesSpaces are the 
only ones that need to be backed by a Map.

2025-03-21:

One of the consequences of letting Physical ResourceSpaces be unmapped, is that
to my best undertanding: we should not allow for a transition to introduce new
physical resource spaces. i.e. what you boot up with is what you get.

There's a couple open questions around how the transitions should change for the
entity based transition model (i.e all transitions take a PD argument which 
represents the entity in the system which is performing the transition):
Q: Who should be able to create/destroy a resource space?
Q: Should the destruction of a resource space only be performed when it has no 
   actively allocated resources, or should it be a recursive operation that 
   cleans up all it's allocations?
Q: Who should be allowed to create/destroy a protection domain?
   ^ We started to discuss this question in today's OS meeting, and one option
     seems to be to treat PDs as a type of resource, which are themselves 
     allocated from a resource space. I don't think that's the only way of 
     dealing with it, but I need to think for a little longer on this...
Q: Who gets to destroy a hold edge? Should it be the current holder, or the 
   entity holding the resource space from which it was allocated, or both?

I need to answer some of these before I finish up the model transitions and I
have reached out to the osmosis folks for their thoughts on this.

2025-03-24:

+ HoldEdge to Protection Domain to demarcate the entity which spawned it.
+ Two versions of resource creation: (1) the process which holds the resource
  space. (2) a domain which has a request edge to the process holding the 
  resource space.

2025-03-25:

Reading List:
 - SOSP 24:
    - Verus: A Practical Foundation for Systems Verification
    - Practical Verification of System-Software Components Written in Standard C
    - Modular Verification of Secure and Leakage-Free Systems: From Application
      Specification to Circuit-Level Implementation
    - NOPE: Strengthening domain authentication with succinct proofs
- KISV 24:
    - Robust and Immediate Resource Reclamation with M3
    - Kicking the Firmware Out of the TCB with the Miralis Virtual Firmware 
      Monitor
    - Bridge: A Leak-Free Hardware-Software Architecture for Parallel Embedded
      Systems
    - Veld: Verified Linux Drivers

2025-03-26:

I started reading "An Evaluation of Capabilities for a Multikernel" whiiich is
Mark Nevill's (ETH) master's thesis. It includes a TLA+ secification of a 
single core Barrelfish capability system which avoids all the hairyness of
multicore capabilities. The thesis also discusses the issues with multicore
capabilities and describes how they were solved in Barrelfish. It might be 
detailed enough to start modelling in Verus, but there's also another thesis by
Simon Gerber: "Virtual Memory in a Multikernel" which seems to have a TLA+ spec
for the multicore case. 

2025-03-27:

I started thinking about how we would model Barrelfish capabilities in the 
Osmosis model. We need a representation that allows for the presentation of
capability operations and the invariants they demand. 

One thing that would be kind of nice is if capabilities could be treated as 
resources that implements/back certain mappings in the system, wether that's to
physical pages, page tables, ... 

Another thing that would be nice as a result is if resources were subsettable 
so that there's some kind of graph edge between a capability and its ancestors.

2025-03-28:

Started reading some of the backgrond section of Nevill's thesis. More 
specifically, I read "Verifying the EROS Confinement Mechanism". I didn't read
it closely enough to fully follwo the pproof, but it pointed to a couple papers
which I should probably read first:
- Protection in Operating Systems (Harrison, Ruzzo, Ullman)
    ^ Introduces an extension to the Graham-Denning take-grant model
- On the inability of an unmodified capability machine to enforce the 
  *-property (W.E. Boebert)
- Protection in Programmed Systems (A.K. Jones, PhD thesis)
    ^ Part of the HYDRA os project
- A note on the confinement problem (B.W. Lampson)
    ^ This paper actually introduces the confinement property pproved in this
      EROS paper.
- Improving IPC by kernel design (J. Liedtke)
    ^ Introduces the modern form of fast IPC which allows for all the fast 
      microkernels we have in the L4 tradition
- EROS: A fast capability system (J.S. Shapiro, ...)

I want to read more about the take-grant system because it seems like the 
osmosis model might just be a concretization of it?


